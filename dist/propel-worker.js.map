{"version":3,"sources":["propel-worker.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_classCallCheck","instance","Constructor","TypeError","notificationHandler","event","defaults","arguments","undefined","PushEvent","data","json","console","log","notification","options","Object","assign","title","waitUntil","self","registration","showNotification","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","PushWorker","this","value","tagName","getNotifications","tag","goog","propel","worker","helpers"],"mappings":"CAAA,QAAUA,GAAEC,EAAEC,EAAEC,GAAG,QAASC,GAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,GAAIE,GAAkB,kBAATC,UAAqBA,OAAQ,KAAIF,GAAGC,EAAE,MAAOA,GAAEF,GAAE,EAAI,IAAGI,EAAE,MAAOA,GAAEJ,GAAE,EAAI,IAAIK,GAAE,GAAIC,OAAM,uBAAuBN,EAAE,IAAK,MAAMK,GAAEE,KAAK,mBAAmBF,EAAE,GAAIG,GAAEX,EAAEG,IAAIS,WAAYb,GAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAG,GAAIE,GAAED,EAAEI,GAAG,GAAGL,EAAG,OAAOI,GAAEF,EAAEA,EAAEF,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,MAAOD,GAAEG,GAAGS,QAAkD,IAAI,GAA1CL,GAAkB,kBAATD,UAAqBA,QAAgBH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,GAAI,OAAOD,KAAKa,GAAG,SAAST,EAAQU,EAAOJ,GACvd,YAuBA,SAASK,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCA6DhH,QAASC,GAAoBC,GAC3B,GAAIC,GAAWC,UAAUV,OAAS,GAAsBW,SAAjBD,UAAU,GAAmBA,UAAU,KAE9E,MAAKF,GAAWA,YAAiBI,YAC/B,KAAM,IAAIjB,OAAM,2DAGlB,KAAKa,EAAMK,KAET,OAAO,CAGT,IAAIA,GAAO,MAEX,KACEA,EAAOL,EAAMK,KAAKC,OAClB,MAAO9B,GAEP,MADA+B,SAAQC,IAAI,uDACL,EAGT,IAAKH,EAAKI,aAER,OAAO,CAGT,IAAIC,GAAUC,OAAOC,UAAWX,EAAUI,EAAKI,aAE/C,OAAKC,GAAQG,OAKbb,EAAMc,UAAUC,KAAKC,aAAaC,iBAAiBP,EAAQG,MAAOH,KAE3D,IANLH,QAAQC,IAAI,yDACL,GA7FX,GAAIU,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIpC,GAAI,EAAGA,EAAIoC,EAAM7B,OAAQP,IAAK,CAAE,GAAIqC,GAAaD,EAAMpC,EAAIqC,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMd,OAAOe,eAAeN,EAAQE,EAAWK,IAAKL,IAAiB,MAAO,UAAUzB,EAAa+B,EAAYC,GAAiJ,MAA9HD,IAAYT,EAAiBtB,EAAYiC,UAAWF,GAAiBC,GAAaV,EAAiBtB,EAAagC,GAAqBhC,MAI5hBkC,EAAa,WACf,QAASA,KACPpC,EAAgBqC,KAAMD,GAoBxB,MAjBAb,GAAaa,IACXJ,IAAK,mBACLM,MAAO,SAA0BC,GAC/B,GAAuB,mBAAZA,IAA8C,gBAAZA,GAC3C,KAAM,IAAI/C,OAAM,wDAGlB,IAAI+C,GAA8B,IAAnBA,EAAQ1C,OACrB,KAAM,IAAIL,OAAM,iDAGlB,OAAO4B,MAAKC,aAAamB,kBACvBC,IAAKF,QAKJH,IA2EThB,MAAKsB,KAAOtB,KAAKsB,SACjBtB,KAAKsB,KAAKC,OAASvB,KAAKsB,KAAKC,WAC7BvB,KAAKsB,KAAKC,OAAOC,QACfC,QAAS,GAAIT,GACbhC,oBAAqBA,aAGZ","file":"propel-worker.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/*\n  Copyright 2015 Google Inc. All Rights Reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/* eslint-env browser */\n\n/**\n * PushWorker is a front end library that simplifies adding push to your\n * site.\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PushWorker = function () {\n  function PushWorker() {\n    _classCallCheck(this, PushWorker);\n  }\n\n  _createClass(PushWorker, [{\n    key: 'getNotifications',\n    value: function getNotifications(tagName) {\n      if (typeof tagName !== 'undefined' && typeof tagName !== 'string') {\n        throw new Error('The optional tagName argument must be a string if set');\n      }\n\n      if (tagName && tagName.length === 0) {\n        throw new Error('The optional tagName cannot be an empty String');\n      }\n\n      return self.registration.getNotifications({\n        tag: tagName\n      });\n    }\n  }]);\n\n  return PushWorker;\n}();\n\n/*\n  Copyright 2015 Google Inc. All Rights Reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/* eslint-env serviceworker */\n/* global PushEvent */\n\n/**\n * A handler for push events that shows notifications based on the content of\n * the payload.\n *\n * The payload must be a JSON-encoded Object with a `notification` key. The\n * value of the `notification` property will be used as the NotificationOptions\n * object passed to showNotification. Additionally, the `title` property of the\n * notification object will be used as the title.\n *\n * If there is no notification data in the payload, or if there is no body or\n * title specified, then no notification will be shown.\n *\n * @param  {PushEvent} event The event that we are handling\n * @param  {Object} defaults If an option is not provided in the payload then\n *   the value of the same key in the defaults object will be used instead.\n * @return {boolean}         true if a notification was shown, false otherwise\n */\n\n\nfunction notificationHandler(event) {\n  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!event || !(event instanceof PushEvent)) {\n    throw new Error('notificationHandler expects argument 1 to be a PushEvent');\n  }\n\n  if (!event.data) {\n    // Nothing to do, no payload\n    return false;\n  }\n\n  var data = void 0;\n\n  try {\n    data = event.data.json();\n  } catch (e) {\n    console.log('Couldn\\'t parse notification data as JSON, ignoring');\n    return false;\n  }\n\n  if (!data.notification) {\n    // Nothing to do, the payload didn't include any notification details\n    return false;\n  }\n\n  var options = Object.assign({}, defaults, data.notification);\n\n  if (!options.title) {\n    console.log('WARN: Notification data found, but no title provided');\n    return false;\n  }\n\n  event.waitUntil(self.registration.showNotification(options.title, options));\n\n  return true;\n}\n\nself.goog = self.goog || {};\nself.goog.propel = self.goog.propel || {};\nself.goog.propel.worker = {\n  helpers: new PushWorker(),\n  notificationHandler: notificationHandler\n};\n\n},{}]},{},[1]);\n"]}