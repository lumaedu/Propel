{"version":3,"sources":["propel-client.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","urlB64ToUint8Array","base64String","padding","repeat","base64","replace","rawData","window","atob","outputArray","Uint8Array","charCodeAt","serverUpdater","url","data","event","type","send","action","isSubscribed","subscription","currentSubscription","message","fetch","method","body","JSON","stringify","headers","Content-Type","_createClass","defineProperties","target","props","descriptor","defineProperty","key","protoProps","staticProps","MESSAGES","not supported","denied","default","endpoint","nogcmid","SubscriptionFailedError","_Error","this","_this","getPrototypeOf","PushClientEvent","_this2","dataKeys","keys","forEach","EventDispatch","_eventTypes","Map","eventType","listener","has","set","Set","get","add","eventListeners","eventListener","SUPPORTED","navigator","ServiceWorkerRegistration","ERROR_MESSAGES","bad factory","bad constructor","redundant worker","registrationReady","registration","active","Promise","resolve","serviceWorker","installing","waiting","reject","state","stateChangeListener","removeEventListener","addEventListener","PushClient","_EventDispatch","_this3","isSupported","_registration","_dispatchStatusUpdate","_this4","all","getSubscription","getPermissionState","then","results","permissionState","status","dispatchEvent","err","console","warn","applicationServerPublicKey","_this5","requestPermission","permissionStatus","applicationServerKey","pushManager","subscribe","userVisibleOnly","_this6","getRegistration","unsubscribe","_this7","dispatchStatusChange","arguments","undefined","Notification","resolvedState","swPath","scope","options","register","reg","permission","goog","propel","PropelClient"],"mappings":"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","file":"propel-client.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/*\n  Copyright 2015 Google Inc. All Rights Reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MESSAGES = {\n  'not supported': 'Your browser doesn\\'t support push messaging.',\n  'denied': 'The user denied permission to show notifications.',\n  'default': 'The user dismissed the notification permission dialog.',\n  'endpoint': 'No endpoint URL specified.',\n  'nogcmid': 'Please ensure you have a Web App Manifest with ' + 'a \"gcm_sender_id\" defined.'\n};\n\nvar SubscriptionFailedError = function (_Error) {\n  _inherits(SubscriptionFailedError, _Error);\n\n  function SubscriptionFailedError(type) {\n    _classCallCheck(this, SubscriptionFailedError);\n\n    var _this = _possibleConstructorReturn(this, (SubscriptionFailedError.__proto__ || Object.getPrototypeOf(SubscriptionFailedError)).call(this));\n\n    _this.message = 'Subscription failed.';\n    if (MESSAGES[type]) {\n      _this.message += ' ' + MESSAGES[type];\n    }\n\n    _this.type = type;\n    return _this;\n  }\n\n  return SubscriptionFailedError;\n}(Error);\n\nvar PushClientEvent = function PushClientEvent(type, data) {\n  var _this2 = this;\n\n  _classCallCheck(this, PushClientEvent);\n\n  this.type = type;\n\n  if (data) {\n    var dataKeys = Object.keys(data);\n    dataKeys.forEach(function (key) {\n      _this2[key] = data[key];\n    });\n  }\n};\n\nvar EventDispatch = function () {\n  function EventDispatch() {\n    _classCallCheck(this, EventDispatch);\n\n    this._eventTypes = new Map();\n  }\n\n  _createClass(EventDispatch, [{\n    key: 'addEventListener',\n    value: function addEventListener(eventType, listener) {\n      if (!this._eventTypes.has(eventType)) {\n        // Create a new set for this event type\n        this._eventTypes.set(eventType, new Set());\n      }\n\n      this._eventTypes.get(eventType).add(listener);\n    }\n  }, {\n    key: 'removeEventListener',\n    value: function removeEventListener(eventType, listener) {\n      if (!this._eventTypes.has(eventType)) {\n        // No events of this type so nothing to do.\n        return;\n      }\n\n      this._eventTypes.get(eventType).delete(listener);\n    }\n  }, {\n    key: 'dispatchEvent',\n    value: function dispatchEvent(event) {\n      if (!this._eventTypes.has(event.type)) {\n        // No events of this type so nothing to do.\n        return;\n      }\n\n      var eventListeners = this._eventTypes.get(event.type);\n      eventListeners.forEach(function (eventListener) {\n        eventListener(event);\n      });\n    }\n  }]);\n\n  return EventDispatch;\n}();\n\nvar SUPPORTED = 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'showNotification' in ServiceWorkerRegistration.prototype;\n\nvar ERROR_MESSAGES = {\n  'bad factory': 'The PushClient.createClient() method expects a service ' + 'worker path and an option scope string.',\n  'bad constructor': 'The PushClient constructor expects a service ' + 'worker registration. Alternatively, you can use ' + 'PropelClient.createClient() to create a PropelClient with a service ' + 'worker path string and an optional scope string.',\n  'redundant worker': 'Worker became redundant'\n};\n\nvar registrationReady = function registrationReady(registration) {\n  if (registration.active) {\n    return Promise.resolve(registration);\n  }\n\n  var serviceWorker = registration.installing || registration.waiting;\n\n  return new Promise(function (resolve, reject) {\n    // Because the Promise function is called on next tick there is a\n    // small chance that the worker became active already.\n    if (serviceWorker.state === 'activated') {\n      resolve(registration);\n      return;\n    }\n\n    var stateChangeListener = function stateChangeListener() {\n      if (serviceWorker.state === 'activated') {\n        resolve(registration);\n      } else if (serviceWorker.state === 'redundant') {\n        reject(new Error(ERROR_MESSAGES['redundant worker']));\n      } else {\n        return;\n      }\n      serviceWorker.removeEventListener('statechange', stateChangeListener);\n    };\n    serviceWorker.addEventListener('statechange', stateChangeListener);\n  });\n};\n\n/**\n* Helper function to convert an application server's public key,\n* which is base 64 URL safe encoded, to a UInt8Array\n* as this is the expected input of the subscribe call\n*/\nfunction urlB64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\n/**\n * PushClient is a front end library that simplifies adding push to your\n * site.\n */\n\nvar PushClient = function (_EventDispatch) {\n  _inherits(PushClient, _EventDispatch);\n\n  /**\n   * Constructs a new PushClient.\n   *\n   * If the current browser has a push subscription then it will be\n   * obtained in the constructor and a subscriptionChange event will be\n   * dispatched.\n   *\n   * @param {ServiceWorkerRegistration} registration - Registration of a\n   *  service worker to be used for push messages\n   */\n  function PushClient(registration) {\n    _classCallCheck(this, PushClient);\n\n    var _this3 = _possibleConstructorReturn(this, (PushClient.__proto__ || Object.getPrototypeOf(PushClient)).call(this));\n\n    if (!PushClient.isSupported()) {\n      throw new Error('Your browser does not support the web push API');\n    }\n\n    if (!(registration instanceof ServiceWorkerRegistration)) {\n      throw new Error(ERROR_MESSAGES['bad constructor']);\n    }\n\n    _this3._registration = registration;\n\n    // It is possible for the subscription to change in between page loads. We\n    // should re-send the existing subscription when we initialise (if there is\n    // one)\n    _this3._dispatchStatusUpdate();\n    return _this3;\n  }\n\n  _createClass(PushClient, [{\n    key: '_dispatchStatusUpdate',\n    value: function _dispatchStatusUpdate() {\n      var _this4 = this;\n\n      return Promise.all([this.getSubscription().catch(function () {\n        return null;\n      }), PushClient.getPermissionState()]).then(function (results) {\n        return {\n          isSubscribed: results[0] !== null,\n          currentSubscription: results[0],\n          permissionState: results[1]\n        };\n      }).then(function (status) {\n        _this4.dispatchEvent(new PushClientEvent('statuschange', status));\n      }).catch(function (err) {\n        console.warn('Unable to dispatch a status event ' + 'getSubscription() failed.', err);\n      });\n    }\n\n    /**\n     * This method will subscribe a use for push messaging.\n     *\n     * If permission isn't granted for push, this method will show the\n     * permissions dialog before attempting to subscribe the user to push.\n     *\n     * @return {Promise<PushSubscription>} A Promise that\n     *  resolves with a PushSubscription if successful.\n     */\n\n  }, {\n    key: 'subscribe',\n    value: function subscribe(applicationServerPublicKey) {\n      var _this5 = this;\n\n      // Check for permission\n      return this.requestPermission(false).then(function (permissionStatus) {\n        if (permissionStatus !== 'granted') {\n          _this5._dispatchStatusUpdate();\n          throw new SubscriptionFailedError(permissionStatus);\n        }\n\n        _this5.dispatchEvent(new PushClientEvent('requestingsubscription'));\n\n        // Make sure we have a service worker and subscribe for push\n        return _this5._registration;\n      }).then(registrationReady).then(function (registration) {\n\n        // Subscribing with application server key\n        var applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);\n        return registration.pushManager.subscribe({\n          userVisibleOnly: true,\n          applicationServerKey: applicationServerKey\n        }).catch(function (err) {\n          return _this5._dispatchStatusUpdate().then(function () {\n            // This is provide a more helpful message when work with Chrome + GCM\n            if (err.message === 'Registration failed - no sender id provided') {\n              throw new SubscriptionFailedError('nogcmid');\n            } else {\n              throw err;\n            }\n          });\n        });\n      }).then(function (subscription) {\n        _this5._dispatchStatusUpdate();\n\n        return subscription;\n      });\n    }\n\n    /**\n     * This method will unsubscribe the user from push on the client side.\n     *\n     * @return {Promise} A Promise that\n     *  resolves once the user is unsubscribed.\n     */\n\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      var _this6 = this;\n\n      var registration = this.getRegistration();\n      if (!registration) {\n        return this._dispatchStatusUpdate();\n      }\n\n      return registration.pushManager.getSubscription().then(function (subscription) {\n        if (subscription) {\n          return subscription.unsubscribe();\n        }\n      }).then(function () {\n        _this6._dispatchStatusUpdate();\n      }).catch(function (err) {\n        return _this6._dispatchStatusUpdate().then(function () {\n          throw err;\n        });\n      });\n    }\n\n    /**\n     * Get the registration of the service worker being used for push.\n     *\n     * @return {ServiceWorkerRegistration} The ServiceWorkerRegistration used\n     * for push messaging.\n     */\n\n  }, {\n    key: 'getRegistration',\n    value: function getRegistration() {\n      return this._registration;\n    }\n\n    /**\n     * If the user is currently subscribed for push then the returned promise will\n     * resolve with a PushSubscription object, otherwise it will resolve to null.\n     *\n     * This will not display the permission dialog.\n     *\n     * @return {Promise<PushSubscription>} A Promise that resolves with\n     *  a PushSubscription or null.\n     */\n\n  }, {\n    key: 'getSubscription',\n    value: function getSubscription() {\n      var registration = this.getRegistration();\n      if (!registration) {\n        return Promise.resolve(null);\n      }\n\n      return registration.pushManager.getSubscription();\n    }\n\n    /**\n     * Will manage requesting permission for push messages, resolving\n     * with the final permission status.\n     * @param {Boolean} dispatchStatusChange - Optional parameter with a\n     * default value of true. If true, a `statuschange` event will be\n     * dispatched once the permission state has resolved (i.e. use interacted\n     * with the permission dialog).\n     * @return {Promise<String>} Permission status of granted, default or denied\n     */\n\n  }, {\n    key: 'requestPermission',\n    value: function requestPermission() {\n      var _this7 = this;\n\n      var dispatchStatusChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      return PushClient.getPermissionState().then(function (permissionState) {\n        // Check if requesting permission will show a prompt\n        if (permissionState === 'default') {\n          _this7.dispatchEvent(new PushClientEvent('requestingpermission'));\n        }\n\n        return new Promise(function (resolve) {\n          return Notification.requestPermission(resolve);\n        }).then(function (resolvedState) {\n          if (dispatchStatusChange) {\n            _this7._dispatchStatusUpdate();\n          }\n          return resolvedState;\n        });\n      });\n    }\n\n    /**\n     * If you want a quick way to create Propel Client this factory method\n     * just takes a service worker file path and optional scope and\n     * returns promise that resolves to a PropelClient or errors if there\n     * was a problem.\n     * @param {String} swPath - This needs to be the path of a service worker\n     * that will be used to handle push messages,\n     * @param {String} scope - Optional parameter that can be used to define\n     * the scope of a service worker.\n     * @return {Promise<PropelClient>} Resolves if the service worker could be\n     * registered successfully\n     */\n\n  }], [{\n    key: 'createClient',\n    value: function createClient(swPath, scope) {\n      if (!swPath || typeof swPath !== 'string' || swPath.length === 0) {\n        return Promise.reject(new Error(ERROR_MESSAGES['bad factory']));\n      }\n\n      var options = void 0;\n      if (scope) {\n        options = { scope: scope };\n      }\n      return navigator.serviceWorker.register(swPath, options).then(function (reg) {\n        return new PushClient(reg);\n      });\n    }\n\n    /**\n     * You can use this to decide whether to construct a new PushClient or not.\n     * @return {Boolean} Whether the current browser has everything needed\n     *  to use push messaging.\n     */\n\n  }, {\n    key: 'isSupported',\n    value: function isSupported() {\n      return SUPPORTED;\n    }\n\n    /**\n     * This method can be used to check if subscribing the user will display\n     * the permission dialog or not.\n     * @return {Promise<PermissionStatus>} PermistionStatus will be\n     * 'granted', 'denied' or 'default' to reflect the current permission state\n     */\n\n  }, {\n    key: 'getPermissionState',\n    value: function getPermissionState() {\n      return new Promise(function (resolve) {\n        resolve(Notification.permission);\n      });\n    }\n  }]);\n\n  return PushClient;\n}(EventDispatch);\n\n/*\n  Copyright 2015 Google Inc. All Rights Reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n/* eslint-env browser */\n\nfunction serverUpdater(url, data) {\n  return function (event) {\n    // We only really care about subscription changes\n    if (event.type !== 'statuschange') {\n      return;\n    }\n\n    send(url, {\n      action: event.isSubscribed ? 'subscribe' : 'unsubscribe',\n      subscription: event.currentSubscription,\n      data: data\n    });\n  };\n}\n\nfunction send(url, message) {\n  return fetch(url, {\n    method: 'post',\n    body: JSON.stringify(message),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nwindow.goog = window.goog || {};\nwindow.goog.propel = window.goog.propel || {\n  PropelClient: PushClient,\n  serverUpdater: serverUpdater\n};\n\n},{}]},{},[1]);\n"]}